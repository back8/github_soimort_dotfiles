#!/usr/bin/env ruby
#
# Dependencies:
# - google-api-client ~> 0.9.0
# - tzinfo            ~> 1.2.0

# References:
# - https://developers.google.com/+/web/api/rest/
# - https://developers.google.com/apis-explorer/#p/plus/v1/
# - https://www.rubydoc.info/github/google/google-api-ruby-client/Google/Apis/PlusV1/PlusService

require 'fileutils'
require 'google/apis/plus_v1'
require 'json'
require 'net/http'
require 'optparse'
require 'tzinfo'

module Gugutasu

  NAME = 'gugutasu'
  VERSION = '2017.01.27'

  UA = 'curl/7.52.1'

  def self.api_key
    @@api_key
  end

  def self.api_key=(api_key)
    @@plus.key = @@api_key = api_key
  end

  def self.register_client(api_key)
    @@plus = Google::Apis::PlusV1::PlusService.new
    @@api_key = @@plus.key = api_key
    @@request_num = 0
  end

  def self.client_registered?
    defined? @@plus
  end

  def self.get_full_image_url(url)
    if url =~ /https:\/\/\w+\.googleusercontent\.com/
      if url =~ /\/s\d+\/[^\/]+$/ or url =~ /\/w\d+-h\d+\/[^\/]+$/ or url =~ /\/w\d+-h\d+-\w+\/[^\/]+$/
        url[0..url[0..(url.rindex('/') - 1)].rindex('/')] + 's0-d' + url[url.rindex('/')..-1]
      elsif url =~ /\/photo.jpg$/ and not url =~ /\/s0-d\/[^\/]+$/
        url[0..url.rindex('/')] + 's0-d' + url[url.rindex('/')..-1]
      else
        url
      end
    else
      url
    end
  end

  def self.save_activity(params)
    begin
      raise "Unregistered client." unless client_registered?
    rescue => e
      puts e.message
      return
    end

    index, activity_id, output_path, timezone =
      params[:index], params[:activity_id], (params[:output_path] or FileUtils.pwd), (params[:timezone].nil? ? 'Etc/UTC' : params[:timezone])

    data = @@plus.get_activity activity_id

    name = data.actor.display_name
    url = data.url
    content = data.object.content
    attachments = data.object.attachments

    published = data.published
    tz = TZInfo::Timezone.get timezone
    published_date = tz.utc_to_local(published).strftime('%F')
    published_date_readable = tz.utc_to_local(published).strftime('%d %b %Y')
    published_time = tz.utc_to_local(published).strftime('%T')

    puts "\n[#{index+1}] URL: #{url}"
    puts "[#{index+1}] Reading post by #{name}, published at #{published}"

    output_dir = File.join(output_path, name, published_date)
    FileUtils.mkdir_p output_dir
    output_base = File.join(output_dir, published_time)

    output_json = output_base + '.json'
    File.open(output_json, 'w').puts data.to_json

    output_md = output_base + '.pt'
    md = content.gsub(/<br \/>/, "\n")
    File.open(output_md, 'w') do |file|
      file.puts '---'
      file.puts "date: #{published_date_readable}"
      file.puts "url: #{url}"
      file.puts '---'
      file.puts md
    end
    puts "[#{index+1}] Post saved at #{output_md}"

    attachments.each do |attachment|
      if attachment.object_type == 'photo'
        image_id = attachment.id
        image_url = get_full_image_url attachment.full_image.url
        puts "[#{index+1}] Downloading image: #{image_url}"
        uri = URI.parse(URI.escape(image_url))
        http = Net::HTTP.new(uri.host, uri.port)
        if http.port == 443
          http.use_ssl = true
          http.verify_mode = OpenSSL::SSL::VERIFY_NONE
        end
        image = http.get(uri.request_uri, {'User-Agent' => Gugutasu::UA})

        begin
          image_filename = image.header['Content-Disposition'].match /filename="([^"]+)"/
          extname = image_filename[1].split('.')[-1]
        rescue
          extname = image.header['Content-Type'].split('/')[-1]
        end

        output_image = "#{output_base}.#{image_id}.#{extname}"
        File.open(output_image, 'w').puts image.body

      elsif attachment.object_type == 'album'
        image_id = attachment.id
        thumbnails = attachment.thumbnails
        if thumbnails
          thumbnails.each_index do |i|
            thumbnail = thumbnails[i]
            image_url = get_full_image_url(thumbnail.image.url)
            puts "[#{index+1}] Downloading image: #{image_url}"
            uri = URI.parse(URI.escape("#{image_url}"))
            http = Net::HTTP.new(uri.host, uri.port)
            if http.port == 443
              http.use_ssl = true
              http.verify_mode = OpenSSL::SSL::VERIFY_NONE
            end
            image = http.get(uri.request_uri, {'User-Agent' => Gugutasu::UA})

            begin
              image_filename = image.header['Content-Disposition'].match /filename="([^"]+)"/
              extname = image_filename[1].split('.')[-1]
            rescue
              extname = image.header['Content-Type'].split('/')[-1]
            end

            output_image = "#{output_base}.#{image_id}[#{i}].#{extname}"
            File.open(output_image, 'w').puts image.body
          end
        end

      elsif attachment.object_type == 'video'
        video_id = attachment.id
        video_url = params[:orig_url] #attachment.url
        puts "[#{index+1}] Downloading video: #{video_url}"
        system "you-get -do '#{output_base}.#{video_id}' #{video_url}"

      end
    end if attachments
  end

  def self.archive_user(params)
    begin
      raise "Unregistered client." unless client_registered?
    rescue => e
      puts e.message
      return
    end

    index, user_id, output_path, timezone =
                                 params[:index], params[:user_id], (params[:output_path] or FileUtils.pwd), (params[:timezone].nil? ? 'Etc/UTC' : params[:timezone])
    output_path += '.archive'  ### TEMP

    tmp_dir = output_path
    quiet = false
    video_downloader = 'you-get'
    response = nil

    # profile (FIXME: 403 -- requires auth?)
    #puts "##{@@request_num+=1} people.get ..." unless quiet
    #data = @@plus.get_person user_id

    maxResults = 100
    next_page_token = nil
    page_num = 0
    post_num = 0

    loop do
      puts "\n\33[92m\33[1m##{@@request_num+=1} activities.list: page[#{page_num}] ...\33[0m" unless quiet
      activities = nil
      loop do
        begin
          activities = @@plus.list_activities user_id, 'public', max_results:maxResults,
                                              page_token:next_page_token
          raise unless activities.items.size > 0
        rescue
          puts "\n\33[93m\33[1m##{@@request_num} Retrying activities.list: page[#{page_num}] ...\33[0m" unless quiet
          sleep 1
          next
        else
          break
        end
      end

      next_page_token = activities.next_page_token

      activities.items.each do |item|
        activity_id = item.id
        activity_url = item.url

        loop do
          begin
            Gugutasu::save_activity(:index => post_num,
                                    :activity_id => activity_id,
                                    :output_path => output_path,
                                    :timezone => timezone,
                                    :orig_url => activity_url)
          rescue
            puts "\n\33[93m\33[1m##{@@request_num} Retrying activities.get: #{activity_id} ...\33[0m" unless quiet
            sleep 1
            next
          else
            break
          end
        end

        post_num += 1
      end

      break unless next_page_token
      page_num += 1
    end
    puts "\33[92m\33[1mOK. #{post_num} posts archived!\33[0m" unless quiet
  end

end



if __FILE__ == $0
  options = {}
  OptionParser.new do |opts|
    opts.banner = 'Usage: '

    opts.on('-a', '--api-key [API_KEY]', 'Specify the Google API key') do |api_key|
      options[:api_key] = api_key
    end

    opts.on('-o', '--output-path [OUTPUT_PATH]', 'Output path (the current directory by default)') do |output_path|
      options[:output_path] = output_path
    end

    opts.on('-t', '--timezone [TIMEZONE]', 'Time zone') do |timezone|
      options[:timezone] = timezone
    end

    opts.on('-x', '--proxy [PROXY]', 'Use proxy on given port') do |proxy|
      options[:proxy] = proxy
    end

    opts.on('-V', '--version', 'Display current version') do
      puts "#{Gugutasu::NAME} #{Gugutasu::VERSION}"
      exit 0
    end
  end.parse!

  options[:api_key] = ENV['GOOGLE_API_KEY'] if
    not options[:api_key]
  options[:output_path] = ENV['GOOGLE_ARCHIVE_PATH'] if
    not options[:output_path]
  options[:timezone] = ENV['GOOGLE_ARCHIVE_TIMEZONE'] if
    not options[:timezone]

  if not options[:api_key]
    puts 'You must specify your Google API key (-a).'
    exit 0
  end

  Gugutasu::register_client(options[:api_key])
  if not Gugutasu::client_registered?
    puts 'Client registration failed.'
    exit 0
  end

  ARGV.each_index do |index|
    url = ARGV[index]
    uri = URI.parse(url)

    if options[:proxy]
      proxy_addr, proxy_port = options[:proxy].split ':'
      http = Net::HTTP.new(uri.host, uri.port, proxy_addr, proxy_port)
    else
      http = Net::HTTP.new(uri.host, uri.port)
    end

    if http.port == 443
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end

    response = http.get(uri.request_uri, {'User-Agent' => Gugutasu::UA})
    # Handle Google+ custom URL redirection
    while response.code == '302'
      response = http.get(response['location'], {'User-Agent' => Gugutasu::UA})
    end

    # Handle Google+ album URL
    if uri.request_uri.start_with? '/photos/' or uri.request_uri.start_with? '/u/0/photos/'
      post_request_uri = '/' + response.body.match(/"([^"\/]+\/posts\/[^"]+)"/)[1]

      response = http.get(post_request_uri, {'User-Agent' => Gugutasu::UA})
      # Handle Google+ custom URL redirection
      if response.code == '302'
        response = http.get(response['location'], {'User-Agent' => Gugutasu::UA})
      end
    end

    if uri.request_uri.split('/').length > 2
      activity_id = response.body.match(/update\/([^"]+)"/)[1]
      Gugutasu::save_activity(:index => index,
                              :activity_id => activity_id,
                              :output_path => options[:output_path],
                              :timezone => options[:timezone],
                              :orig_url => url)
    else
      user_id = uri.request_uri.split('/')[1]
      Gugutasu::archive_user(:index => index,
                             :user_id => user_id,
                             :output_path => options[:output_path],
                             :timezone => options[:timezone])
    end

  end
end
