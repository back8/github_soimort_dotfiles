#!/usr/bin/env python
#

import subprocess

proc = subprocess.Popen(["/home/soimort/Projects/mi-caja/src/caja"],
                        stdout=subprocess.PIPE)

s = {}      # stores (slot, uri), indexed by notebook & page_num
lastp = {}  # stores last page_num, indexed by notebook

def search(slot):
     """Find a given slot in s and return (notebook, page_num)."""
     for notebook in s:
          for page_num, data in enumerate(s[notebook]):
               if slot == data[0]:
                    return notebook, page_num
     return None

for line in iter(lambda: proc.stdout.readline(), b''):
     text = str(line, encoding='utf-8').rstrip()

     if text[:3] == ">>>":  # recognized log
          action, info = text[4:].split(': ')

          if action == "location updated":
               # which notebook window and page_num? use window slot to decide
               slot, uri = info.split(' ')
               notebook, page_num = search(slot)  # should never fail
               s[notebook][page_num] = (slot, uri)

          elif action == "slot added":
               # each window slot belongs to a notebook window
               notebook, slot = info.split(' ')
               # reserve slot to be used by 'page added'

          else:
               notebook, page_num = info.split(' ')
               page_num = int(page_num)

               if action == "page added":
                    # URI yet to be set by 'location updated'
                    # slot from previous 'slot added'
                    if notebook not in s:
                         # new notebook
                         s[notebook] = [(slot, '?')]
                    else:
                         # existing notebook
                         s[notebook].insert(page_num, (slot, '?'))

               elif action == "page removed":
                    # remove page from notebook
                    s[notebook].pop(page_num)
                    if s[notebook] == []:
                         # if it's the last page, remove notebook then
                         del s[notebook]

               elif action == "page reordered":
                    # swap with last page_num in notebook
                    # notebook must be the same!
                    tmp = s[notebook].pop(lastp[notebook])
                    s[notebook].insert(page_num, tmp)

               elif action == "page switched":
                    # nothing, just
                    pass
               # set last page_num in notebook
               lastp[notebook] = page_num

          print(s)
